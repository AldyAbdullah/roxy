import heapq  

def dijkstra(graph, start):  
    # Inisialisasi jarak dari start ke semua node dengan infinity  
    distances = {node: float('inf') for node in graph}  
    distances[start] = 0  # Jarak ke node awal adalah 0  

    # Menggunakan heap untuk mendapatkan node dengan jarak terkecil  
    priority_queue = [(0, start)]  

    while priority_queue:  
        current_distance, current_node = heapq.heappop(priority_queue)  

        # Jika jarak yang diambil lebih besar, abaikan  
        if current_distance > distances[current_node]:  
            continue  

        # Iterasi tetangga dari node saat ini  
        for neighbor, weight in graph[current_node].items():  
            distance = current_distance + weight  

            # Jika jarak baru lebih kecil, perbarui jarak dan masukkan ke dalam heap  
            if distance < distances[neighbor]:  
                distances[neighbor] = distance  
                heapq.heappush(priority_queue, (distance, neighbor))  

    return distances  

# Contoh graf dalam bentuk dictionary  
graph = {  
    'A': {'B': 1, 'C': 4},  
    'B': {'A': 1, 'C': 2, 'D': 5},  
    'C': {'A': 4, 'B': 2, 'D': 1},  
    'D': {'B': 5, 'C': 1}  
}  

# Memanggil fungsi dan mencetak hasil  
start_node = 'A'  
print(dijkstra(graph, start_node))  
